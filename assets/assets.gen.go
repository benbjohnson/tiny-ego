// Code generated by go-bindata.
// sources:
// styles/main.css
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _stylesMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5d\x6f\xdb\x46\xd6\xbe\xe7\xaf\x38\x6f\x5e\x14\x48\x5c\x51\x96\x64\xc9\xf2\x32\xe8\x45\x37\xeb\x6e\x8d\xdd\x45\x8b\x4d\x81\x5e\x04\x01\x34\x9c\x39\x94\xa6\x26\x67\x88\x99\xa1\x64\xa5\xed\x7f\x5f\xcc\x07\xc5\x0f\x91\x72\x0a\xc4\x68\x73\x13\x9b\x1c\xce\xf9\x7e\xce\x73\x8e\xaf\xaf\xfe\x0f\x84\x54\x05\xc9\xf9\x27\x9c\x52\xad\x61\xbf\x9e\xce\xa6\x33\xf8\x0d\xfe\xf3\xf0\x13\xfc\x9b\x53\x14\x1a\xe1\x37\xd8\x72\xb3\xab\xd2\x29\x95\xc5\xb5\x40\x2a\x73\xa2\xaf\xbb\xdf\x5d\x5d\x47\xd7\x57\xf0\x0f\x49\xab\x02\x85\x89\x00\xe0\x9b\x2f\xf6\xcf\x5f\x7e\x15\xc1\x15\xcc\xa7\xf0\x4e\x2a\x85\xd4\x80\xd9\x21\xe4\x5c\x20\xec\x90\x6f\x77\x06\xb8\x00\x92\xe7\x90\x2a\x79\xd0\xa8\xf4\xd4\x1e\x5f\x4c\xe1\x47\x85\x7b\x14\x06\x08\xfb\xa5\xd2\xc6\x2a\xa7\x41\x66\x90\x49\x61\x40\xf3\x4f\x08\x24\x33\xa8\x40\x2a\x8e\xc2\x10\xc3\xa5\x00\xba\x23\x62\x8b\x1a\xb8\xb0\x77\x00\xc0\xc3\x3d\x48\x01\x3f\x73\xc1\xe4\x41\xc3\x8f\x3b\x29\x10\x88\x60\x56\x24\xff\xe1\xbd\x95\x74\x1d\xed\x4c\x91\xc3\xaf\x11\x38\x9d\x62\xaf\x53\x02\xf3\xe9\x7c\xf5\x36\x02\xb8\xbe\x82\xb9\x3d\x05\x10\x17\x3a\x36\xf8\x64\x62\x2b\x3c\xf6\x5a\x25\x30\x9f\xcd\xbe\x0a\xe7\x16\xe1\xdc\x01\xd3\x47\x6e\x9e\x3f\x0b\xbf\x47\xd6\xf5\xef\x91\x5a\xe5\xf5\x8b\xb9\xfe\xbf\x58\xc8\x3d\x3a\xb7\x17\x44\x6d\xad\xed\x5d\x8f\xc3\x6b\x59\x72\xc1\xa5\x20\x06\xd9\x1b\xef\x95\x54\xb2\xa3\xf3\x8a\xff\x24\x81\xd9\x5b\xaf\xaf\xbb\xf2\x5b\xc6\xdc\x7d\x34\x84\x94\x71\x5d\xe6\xe4\x68\x2f\x7e\xb8\x87\xbf\xc5\xfe\x0e\xa2\x0c\xa7\x39\x4e\x22\xa2\x39\xc3\x49\x94\x49\x69\x50\x4d\xa2\x1d\x12\x66\xff\x17\x64\x3f\x89\xb4\x37\xdf\xc9\x0a\xd7\x24\x90\xe6\x92\x3e\xb6\x05\xb6\x73\xa7\x95\x01\x82\xd5\x26\x49\x01\x9b\xdd\x7c\x03\x98\xa3\x4f\x95\x03\x37\x3b\x2e\x60\x13\xee\xdf\xd8\xc3\xf6\xa6\x4d\xd0\x6a\x03\x54\x0a\x1b\x23\x9b\x2e\xf0\x6e\xa7\x64\x81\x13\xf8\x8e\x2b\xcc\xe4\xd3\xc4\x5d\xfd\x9e\x64\x44\xf1\x90\x25\x73\xa7\xa1\x95\xed\x82\x9a\xc0\x02\x8b\xb7\x6d\xff\x4c\x6f\xd7\x58\x9c\xdc\x04\xff\x54\xb2\x2a\xb9\xd8\x7a\x31\x2f\x58\x59\x9f\x13\x0b\x5b\x7e\x17\xcf\x79\x23\x33\xbe\xa5\xa4\xb4\xee\x9a\xd8\x9f\x2b\x85\x93\xa8\x20\xdc\x07\xa7\xa9\x84\xf1\x30\xf5\x65\x34\xf9\xf6\x70\x0f\x77\x27\x21\x95\xc2\x4e\x6e\xcd\xb1\x80\xe5\xac\x7c\x6a\x5f\x35\xa0\x71\x2a\x9f\x6c\xdc\xad\x53\xb9\xa8\x43\x55\xc3\xc5\xfb\x9d\x3c\xb8\xd3\x72\x8f\x2a\xcb\xe5\xc1\x9e\xb9\x67\x5b\x9f\x25\xb5\x85\x3b\xe5\x04\xa7\xf2\x29\xf6\x37\x25\x75\x7c\xe2\x54\x3e\x75\x0b\xbe\x86\x82\x59\xf7\x71\x7d\x7f\x02\x7b\xae\x79\x9a\xe3\x59\x49\x0f\x01\x1e\x17\x3b\x54\xdc\x10\x41\xbd\x42\x9a\x92\xdc\x1a\xd2\x41\xb4\x11\x24\x6c\xdf\x23\x19\x83\x0d\x16\x9b\xd3\x57\xc1\x1b\xfd\xef\xae\xa3\x32\x38\xd9\xa5\x6c\x46\x0a\x9e\x1f\x13\x28\xa4\x90\xba\x24\x14\x27\xcd\x8f\x5d\xf3\x5a\x19\x3e\xf7\x19\xde\x85\xab\x9f\x2c\xac\xe5\xb8\xc7\x1c\x34\x16\x44\x18\x4e\x5f\x0e\xba\xe6\xd3\x36\x7a\x6d\x15\x39\x42\x4a\xe8\xe3\x56\xc9\x4a\x30\x5b\xf3\x84\x1a\xbe\x77\xed\xe4\x51\x87\x34\x9b\xcf\x6a\xbf\x85\x4f\xb7\xa4\x74\xef\xfc\xa1\x4a\x30\x54\xae\xfd\xf8\x26\x00\x77\x5f\xb7\x8a\x1d\xee\xbe\x0e\xd8\xe5\xf3\xe4\x24\x2c\xa6\x32\x97\x2a\x01\xa3\x88\xd0\x25\x51\x28\x4c\xaf\x3d\xb4\x61\x9f\x21\x95\xca\xf5\xa4\x58\x3f\xf2\x32\x01\x99\xfe\x82\xd4\xe8\xd1\x54\x69\x59\x99\x4a\x63\x64\x01\xa9\x54\x0c\x55\x83\x4d\xb0\x5a\xc7\x4e\xd1\x90\xf7\x70\x13\x4a\x7b\x71\x5e\x28\x56\x07\x68\x74\x68\x03\x9c\xad\x88\x09\x3c\xdc\x4f\xe0\x87\x12\x15\x39\x07\x3a\x92\xa6\xea\x83\xe1\x26\xc7\x8f\xa1\x54\xac\x1e\xb1\xd7\x2a\x01\x21\x45\x2f\x61\x7a\x06\x27\x8d\x87\xbb\x7d\x71\xfc\x1c\x30\x69\x0c\xb2\x61\xe7\xd4\x34\xc0\xda\xc7\xaa\x32\xe7\x94\x18\x04\x52\xfa\x9f\xac\x75\x32\x83\x4d\x2a\x73\x86\x6a\x03\xe9\xd1\x1d\x14\xd6\x01\xaa\xca\x5d\x90\x43\x64\x6f\x43\x63\x9b\x44\xda\x28\x29\xb6\x4d\x71\x1c\x42\xa1\x87\x1a\xbd\x04\x68\xae\xea\x0e\x27\xde\xd2\xf5\x6a\xdf\x95\x17\x44\x79\x7d\xdf\xfe\x95\xf0\x82\x4a\xdb\xa3\x1f\x53\x36\x89\x34\x29\xca\x17\xc0\x8e\x71\x8f\x6a\x73\xf4\xb1\xfa\x56\x30\x25\x39\x83\xe5\xf4\x26\x90\x08\x96\x89\x56\xe7\xb5\xe7\x12\xe0\x86\xe4\x9c\x5e\x8a\x53\x0b\x25\xac\xf7\x5c\xf1\xf6\xd8\x49\x41\xd4\xe3\x48\x91\xff\x7f\x96\x39\xd0\xaf\x7f\x9d\xcd\x2e\xb2\x9f\x8b\x01\xb9\x8e\x74\x61\x9f\xf5\xd8\xc3\xdd\xec\xab\xb7\x03\x59\xbe\xd1\x55\xea\xa8\x8a\xfd\xa9\x6c\xd1\x99\x4c\xc9\x02\x48\x96\x59\x36\x23\xb6\x03\x1c\xda\xde\x32\x20\xbb\xb2\x49\x58\x95\x7d\xf1\xeb\x95\x63\xa2\x1d\xca\xeb\x4c\x2e\xa5\xe6\xbe\x3c\x15\xe6\xc4\x82\xab\x7d\xba\x47\x4b\x9a\x48\x1e\x93\x9c\x6f\x45\x02\x29\xd1\xe8\x2a\xdc\x9a\xa0\xab\x34\x20\x85\x87\x88\x78\x36\x5d\xac\xb0\x08\xef\xbc\x68\x23\x4b\xf7\xa2\x7e\x7e\x7d\x05\xf7\x45\x8a\x8c\x21\xfb\x4b\x10\xa4\xeb\x88\x54\x8c\xcb\x49\xb4\xe7\x0c\x65\x97\x8c\x72\xe1\xdc\xf4\x2c\xd9\x69\xdd\x6b\xfb\xca\x32\x5e\xb7\x6e\x4e\x84\x34\xaf\x3f\x58\x53\x95\xcc\xf5\xc7\x37\x5d\x11\x35\xaa\x36\xa1\x68\xc9\xe9\xf4\x06\xd7\x14\x2c\xa4\x17\xc4\x4f\x3a\x96\x5a\xf7\xfa\x5f\xb0\x88\x17\xdb\x36\x82\x87\xda\x71\xa2\x5a\xb7\x7f\x6f\xbf\xef\xf3\xa6\x9a\x2e\xe9\xfd\xd6\x29\x9e\x28\x29\x8d\xd7\xb9\xa1\x3f\x3b\xce\x18\x8a\x3a\x9c\xdf\x49\x55\xbc\x28\x11\x78\xe7\x86\xbb\xd6\x04\x60\xed\xd1\xcf\xcf\x32\x2d\x26\xd0\x1d\x81\xea\x46\x7a\x06\xdb\x95\x31\x96\x01\x73\x51\x56\x66\x12\xc9\xd2\x58\x74\x28\xed\xa8\x92\x23\x35\x93\xc8\x76\x32\xa2\x90\x9c\x43\xa4\x26\x42\xc7\x1a\x15\xcf\xc6\x81\xb1\x19\x02\xc3\xcb\x67\xe6\xce\x66\x00\x1b\xc4\xd3\x41\xde\xeb\xe3\x67\xbd\x36\x4a\x8b\x07\x6c\xed\xd1\xfc\x73\xa2\x3b\x9c\x94\xed\x56\x25\x33\x4f\x3e\x1c\x4d\xca\xa4\x2a\x6a\x71\xbd\xd1\xaa\x51\xf0\x8f\x5c\xd4\xa2\xfc\x8d\xea\x3e\x2a\x3d\xdd\x1d\xd9\x38\x7d\x7b\x9e\xf5\xf3\xd6\x7e\x01\x7e\xc6\xf4\x5f\xdc\x40\x5a\x6d\xe1\xb0\x43\x85\xf0\x7a\xf1\x06\x18\xda\xde\x7d\xd4\x20\x1c\x0a\xc2\xc6\x95\x71\xc0\x66\x87\x12\x9b\xb0\x64\xa8\x8b\xba\xdb\xbf\x06\x7a\x31\x17\x24\xe5\x39\x37\x47\x30\x32\xb4\x3c\x9a\x73\xfa\x48\xd2\x1c\xc1\x1c\x4b\x9f\xcd\x16\x3b\xc6\x52\xd2\xed\x2a\x3e\xd8\xa3\xdf\xbc\xf2\xcf\x5e\x7d\x9c\x44\xe1\x81\x42\x8d\xa6\xf5\xbb\xae\xd2\x82\x9b\x57\x9e\xc6\xd5\xf4\x94\x94\x25\x12\x65\x5d\x9c\x80\xbf\x61\x38\xad\x3a\x61\x11\xa8\x6a\xe8\xb1\x9a\x95\x84\xb1\xf3\x21\xac\xd6\x32\x49\xe2\x42\x7e\x8a\x33\x49\x2b\x1d\xbb\x6f\x4f\x1a\xd5\x2a\x5f\x38\x12\x8c\xb8\x70\xa2\x36\xeb\xfc\xc8\x18\xda\xd9\xb6\xe6\x55\x3e\x43\x56\x6d\xa4\xaa\x31\x85\x56\xba\x06\x95\x4a\x68\x34\x35\x99\x2c\x15\xee\xb9\xac\xb4\x23\x94\x1d\x4b\x1b\x05\x14\x17\xdb\x73\x33\x47\xde\xd7\x36\x8e\xbc\x3e\x19\xd8\x7d\xef\xd1\xb7\x32\x16\x2e\x12\x98\x97\x4f\x81\x36\xc3\xdf\x9d\x38\x3b\x97\x8d\x6d\x4c\xc6\x02\x96\x71\xcc\x99\xb5\xf4\xd7\x8e\x8b\xa6\x37\x2b\x2c\x60\x36\x5d\xfb\xff\x6e\x17\x4d\xd7\x1e\xa2\xaa\xae\x4e\x0f\x8a\x94\x65\x90\xd1\x9b\xba\xfb\x65\x50\x93\xb1\xa6\xd8\x1d\xb9\xd9\xd4\xda\xb4\x58\x4f\x03\x65\x37\x1d\xa4\xa8\x0d\xd2\x12\x98\x1d\x45\x65\x69\xa1\x9f\x28\x04\x21\x0d\x50\x52\x59\x4e\x24\x2b\x63\xeb\x59\xd8\x2f\x8e\xf0\x09\x95\xb4\x8f\x42\xd1\x8e\x48\x3b\x67\x50\x39\x6e\x51\xb0\xb3\xad\xc1\x69\x2c\xea\x2d\x0d\x02\x65\xac\x47\x89\xce\x04\x74\x6a\xf7\x86\x34\x6b\x83\x13\xca\x3f\xc5\x07\xce\xcc\x6e\xa8\x43\xb4\xb2\xd7\x3f\xbf\xf1\xcf\x0f\x3b\x6e\x30\x76\x44\x3c\x09\xeb\xe0\xd6\x87\x97\x97\x29\x83\x6b\xa2\x81\x59\xb2\xa6\x7e\xe0\xa8\x9f\x75\xd4\xe8\xbe\xcc\x4d\x94\xf5\xf2\x41\x6e\x15\x6a\x7d\x81\x49\x75\x2c\x1c\x25\x98\xcf\x81\x13\xc3\x8c\x54\x79\x4b\x4d\x4d\x95\xcc\xf3\x94\xa8\x36\x8f\xe9\x74\xec\xa6\xaf\x91\xca\xc8\x3f\xb4\x73\x6a\xe8\x55\x8f\x55\xb4\x2a\xac\x4d\xc1\x42\x45\xd3\x1d\xd2\xc7\x54\x3e\xb5\xc1\x9a\x30\x2e\x5f\x7d\xfc\xec\xbc\x3a\x4b\x81\x9e\x4b\x3a\x05\x56\x29\x2d\x55\xe8\x30\x32\x03\x2e\xa8\x72\x29\xee\xa2\xc4\xb0\xfe\xcd\xe3\x54\x6b\xff\xd9\x51\x5a\x54\x45\x8a\xca\xe1\x6c\xe8\x1d\x0e\x64\x63\x5d\x72\x11\xd7\x0d\x69\xf4\xac\xac\x4c\xf7\xac\xb3\xb4\x66\x39\x03\x8e\xef\x0f\xad\x4d\xa3\x6a\xed\x40\xba\x7d\xf1\x6c\xd6\xf5\xe0\xd8\x4c\x93\xed\x16\x5a\x83\x2b\x12\x45\x77\x17\x9a\xa2\x4d\x15\x87\x0d\xbd\xad\x9f\xbf\x3b\x96\x59\xa6\xd1\x24\x10\x2f\xca\xa7\xcf\xec\x9c\x75\x6e\xb8\x41\xd4\x0a\xc9\xcf\x3d\xdf\x5e\x41\x49\x01\x05\xa1\xf5\x9f\x27\x7a\x7a\x37\x1e\xf6\x4f\x62\x7f\x63\x3f\x20\xa3\xc7\x5b\x5b\xa1\x31\x0f\x0c\x70\xa5\x2f\xc1\x62\x5c\xb4\x3c\x87\x77\xfc\xbd\x54\x16\xb5\x0d\x47\x6d\x2f\xda\x04\xc4\xdc\xf4\xe3\xd6\x58\x90\xf1\x1c\xe3\xaa\xcc\x25\x61\xed\x9c\x7a\x96\xd9\xb4\x38\xf8\x10\x30\x87\xf9\xe5\x41\x18\x54\x7e\x9d\xf8\x12\x53\xcc\x17\xda\xd4\x37\xeb\xbb\xd6\x2a\x30\x2c\x4a\xd0\x10\x9e\xeb\x49\x54\xa0\xa8\xc6\xff\x9c\xf2\x8c\x22\x43\x2b\x84\xa2\x20\xea\xd8\xbd\x31\xe7\xda\xc4\xdc\x34\xd3\xfc\x7b\xaa\x78\x69\xb8\xd8\xfe\xc9\x63\x3c\x25\x62\x4f\x2e\xb5\x9d\xcf\xfd\x2b\x56\xdd\x38\x8a\x32\x27\x06\x07\xc6\xf5\x60\xf8\xf7\x6e\x0a\xfe\x93\xac\x6e\x1a\x8d\x1f\xc6\x3f\x8e\xe8\x39\x25\x39\xaa\x40\xf3\x06\x17\x3c\xa7\xf6\x32\x5d\xaf\x14\x16\x30\x9f\x2e\xec\xff\xcd\x1f\xb8\x4e\x0b\xe0\x79\x78\xec\x1b\x95\x27\xa2\x5a\xe6\x9c\xf5\x57\xe3\xa1\x93\xd9\x46\x57\xe9\x04\xc2\x85\xf0\x7b\x04\xe0\xd5\x89\xe3\x52\xf1\x53\x6a\xb5\xb7\x6d\xcb\xd9\x9d\x1b\x82\x07\x77\x73\x94\xe2\x2a\xcb\xc2\x6b\x2f\xa3\x7e\x95\xde\x31\x92\x65\x5d\x19\x1a\xa9\x14\xec\x5c\xca\xf2\x76\x49\x96\x38\x2a\x05\xd7\x78\x87\x64\x50\x0a\x63\x2c\xc3\x45\x4f\x4a\x45\x69\x4d\x77\x1a\x19\xf3\xd5\x6a\xbd\x58\x8e\xca\x60\x4b\x64\x6c\x58\x06\xbd\xc1\x5b\x9a\x76\x65\x30\x8b\x9d\xaa\x27\x62\xbd\x98\xd3\x0b\x22\xb2\x3b\xb6\x1e\x11\x91\xad\xe8\x99\x88\x03\x51\xa2\x1e\x35\x1a\x19\x77\xab\xdb\xe5\xec\x82\x8c\x2c\xbb\xa1\x6c\x58\x46\x86\x98\x92\xae\x0c\x2e\x32\xd9\x8f\x38\x5d\x2d\x6f\x67\xe3\x7e\x9a\x23\xcd\xe6\xc3\x11\x47\x5c\xa1\x33\xe2\x7f\x01\x00\x00\xff\xff\xaf\x06\x1c\x19\x12\x21\x00\x00")

func stylesMainCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesMainCss,
		"styles/main.css",
	)
}

func stylesMainCss() (*asset, error) {
	bytes, err := stylesMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles/main.css", size: 8466, mode: os.FileMode(420), modTime: time.Unix(1515890614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"styles/main.css": stylesMainCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"styles": &bintree{nil, map[string]*bintree{
		"main.css": &bintree{stylesMainCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

